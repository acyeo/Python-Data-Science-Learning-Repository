{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d03c8e7a-e57d-43fc-af5c-e2c7cc10a375",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Popular format for storing data\n",
    "#how to use python module for reading csv files. \n",
    "#analyze data\n",
    "#write results to a new csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5461fcaa-636f-4582-8970-9f8ccffc5de6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Adj Close']\n",
      "['8/19/2014', '585.002622', '587.342658', '584.002627', '586.862643', '978600', '586.862643']\n"
     ]
    }
   ],
   "source": [
    "import csv\n",
    "from datetime import datetime\n",
    "\n",
    "path = \"/Users/alexyeo/Desktop/Project 2/tutorials/Google Stock Market Data - google_stock_data.csv.csv\"\n",
    "file = open(path, newline='')\n",
    "reader = csv.reader(file)\n",
    "\n",
    "header = next(reader) #the first line is the header\n",
    "data = [row for row in reader] #read the remaining data\n",
    "\n",
    "print(header)\n",
    "print(data[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f9fccc5a-9049-4623-a818-862c88b52518",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[datetime.datetime(2014, 8, 19, 0, 0), 585.002622, 587.342658, 584.002627, 586.862643, 978600, 586.862643]\n"
     ]
    }
   ],
   "source": [
    "#problem is that this opened the header and first row as strings\n",
    "import csv\n",
    "from datetime import datetime\n",
    "\n",
    "path = \"/Users/alexyeo/Desktop/Project 2/tutorials/Google Stock Market Data - google_stock_data.csv.csv\"\n",
    "file = open(path, newline='')\n",
    "reader = csv.reader(file)\n",
    "\n",
    "header = next(reader) #the first line is the header\n",
    "\n",
    "data = []\n",
    "for row in reader: \n",
    "    # row = [Date, Open, High, Low, Close, Volume, Adj. Close]\n",
    "    date = datetime.strptime(row[0], '%m/%d/%Y')\n",
    "    #convert the open, high, low, and close to floats\n",
    "    open_price = float(row[1]) # 'open' is a builtin function in python\n",
    "    high = float(row[2])\n",
    "    low = float(row[3])\n",
    "    close = float(row[4])\n",
    "    volume = int(row[5])\n",
    "    adj_close = float(row[6])\n",
    "\n",
    "    data.append([date, open_price, high, low, close, volume, adj_close])\n",
    "\n",
    "print(data[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "15798735-01e8-4fe7-87a7-7f414d358d3d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "40"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#compute the daily stock returns and store them to a separate CSV\n",
    "#in finance, Stock Return = % change in price\n",
    "returns_path = \"/Users/alexyeo/Desktop/Project 2/tutorials/google_returns.csv\"\n",
    "file = open(returns_path, 'w')\n",
    "writer = csv.writer(file)\n",
    "writer.writerow([\"Date\", \"Return\"])\n",
    "\n",
    "for i in range(len(data) - 1):\n",
    "    todays_row = data[i]\n",
    "    todays_date = todays_row[0]\n",
    "    todays_price = todays_row[-1]\n",
    "    yesterdays_row = data[i+1]\n",
    "    yesterdays_price = yesterdays_row[-1]\n",
    "\n",
    "daily_return = (todays_price - yesterdays_price) / yesterdays_price\n",
    "writer.writerow([todays_date, daily_return])\n",
    "\n",
    "#the data is not formatted in a user friendly way"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e29d6667-4252-49a1-a623-9d88d26f22c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "31"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "returns_path = \"/Users/alexyeo/Desktop/Project 2/tutorials/google_returns.csv\"\n",
    "file = open(returns_path, 'w')\n",
    "writer = csv.writer(file)\n",
    "writer.writerow([\"Date\", \"Return\"])\n",
    "\n",
    "for i in range(len(data) - 1):\n",
    "    todays_row = data[i]\n",
    "    todays_date = todays_row[0]\n",
    "    todays_price = todays_row[-1]\n",
    "    yesterdays_row = data[i+1]\n",
    "    yesterdays_price = yesterdays_row[-1]\n",
    "\n",
    "daily_return = (todays_price - yesterdays_price) / yesterdays_price\n",
    "formatted_date = todays_date.strftime('%m/%d/%Y')\n",
    "writer.writerow([formatted_date, daily_return])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ad76496-2129-49d5-98e6-8e75eb4ff4e4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
